# -*- coding: utf-8 -*-
"""cancer detection

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cItLiGpyOYNldf1lZ-XmDGDYmB3-_BMi
"""

!pip install tensorflow-gpu==2.0.0-rc0

import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import Sequential
from tensorflow.keras.layers import Flatten,Dense,Dropout,BatchNormalization
from tensorflow.keras.layers import Conv1D,MaxPool1D
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.optimizers import Adam

print(tf.__version__)

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

from sklearn import datasets,metrics
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler

cancer=datasets.load_breast_cancer()

print(cancer.DESCR)

x=pd.DataFrame(cancer.data,columns=cancer.feature_names)
x.head()

y=cancer.target

y

cancer.target_names

x.shape

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=0,stratify=y)

x_train.shape

x_test.shape

scalar=StandardScaler()
x_train=scalar.fit_transform(x_train)
x_test=scalar.fit_transform(x_test)

x_train=x_train.reshape(455,30,1)
x_test=x_test.reshape(114,30,1)

epochs=50
model=Sequential()
model.add(Conv1D(filters=32,kernel_size=2,activation='relu',input_shape=(30,1)))
model.add(BatchNormalization())
model.add(Dropout(0.2))



model.add(Conv1D(filters=64,kernel_size=2,activation='relu'))
model.add(BatchNormalization())
model.add(Dropout(0.5))

model.add(Flatten())
model.add(Dense(64,activation="relu"))
model.add(Dropout(0.5))


model.add(Dense(1,activation="sigmoid"))

model.summary()

model.compile(optimizer=Adam(lr=0.00005),loss='binary_crossentropy',metrics=["accuracy"])

history=model.fit(x_train,y_train,epochs=epochs,validation_data=(x_test,y_test),verbose=1)

def plot_learningCurve(history,epoch):
  epoch_range=range(1,epoch+1)
  plt.plot(epoch_range,history.history['accuracy'])
  plt.plot(epoch_range,history.history["val_accuracy"])
  plt.title("Model Accuracy")
  plt.ylabel('Accuracy')
  plt.xlabel('epoch')
  plt.legend(['Train','val'],loc='upper left')
  plt.show()


  plt.plot(epoch_range,history.history['loss'])
  plt.plot(epoch_range,history.history["val_loss"])
  plt.title("Model loss")
  plt.ylabel('loss')
  plt.xlabel('epoch')
  plt.legend(['Train','val'],loc='upper left')
  plt.show()

history.history

plot_learningCurve(history,epochs)